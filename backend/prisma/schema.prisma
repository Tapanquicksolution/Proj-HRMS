generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Multi-tenancy support
model Tenant {
  id          String   @id @default(uuid())
  name        String   @unique
  displayName String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  users        User[]
  employees    Employee[]
  departments  Department[]
  attendances  Attendance[]
  leaves       Leave[]
  payslips     Payslip[]
  documents    Document[]
  notifications Notification[]

  @@map("tenants")
}

// User model for authentication and access control
model User {
  id             String   @id @default(uuid())
  email          String   @unique
  password       String?
  passwordResetToken String?
  passwordResetExpires DateTime?
  firstName      String
  lastName       String
  isActive       Boolean  @default(true)
  lastLogin      DateTime?
  role           Role     @default(EMPLOYEE)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  googleId       String?  @unique
  microsoftId    String?  @unique
  tenantId       String

  // Relationships
  tenant        Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  employee      Employee?
  sentNotifications Notification[] @relation("SentBy")
  receivedNotifications Notification[] @relation("ReceivedBy")

  @@unique([email, tenantId])
  @@map("users")
}

enum Role {
  ADMIN
  HR
  MANAGER
  EMPLOYEE
}

// Employee profile
model Employee {
  id            String   @id @default(uuid())
  employeeId    String   @unique
  userId        String   @unique
  departmentId  String?
  managerId     String?
  position      String
  joinDate      DateTime
  terminationDate DateTime?
  dateOfBirth   DateTime?
  gender        Gender?
  address       String?
  phoneNumber   String?
  emergencyContact String?
  bankAccount   String?
  salary        Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  tenantId      String

  // Relationships
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  department    Department? @relation(fields: [departmentId], references: [id])
  manager       Employee? @relation("EmployeeToManager", fields: [managerId], references: [id])
  subordinates  Employee[] @relation("EmployeeToManager")
  attendances   Attendance[]
  leaves        Leave[]
  payslips      Payslip[]
  documents     Document[]
  reviews       PerformanceReview[] @relation("ReviewedEmployee")
  reviewsGiven  PerformanceReview[] @relation("Reviewer")
  goals         Goal[]

  @@map("employees")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

// Department
model Department {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tenantId    String

  // Relationships
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  employees   Employee[]

  @@unique([name, tenantId])
  @@map("departments")
}

// Attendance record
model Attendance {
  id          String   @id @default(uuid())
  employeeId  String
  clockIn     DateTime
  clockOut    DateTime?
  date        DateTime @db.Date
  status      AttendanceStatus @default(PRESENT)
  note        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tenantId    String

  // Relationships
  employee    Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("attendances")
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  HALF_DAY
  ON_LEAVE
  WORK_FROM_HOME
}

// Leave request
model Leave {
  id           String   @id @default(uuid())
  employeeId   String
  startDate    DateTime @db.Date
  endDate      DateTime @db.Date
  leaveType    LeaveType
  reason       String
  status       LeaveStatus @default(PENDING)
  approvedById String?
  rejectionReason String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  tenantId     String

  // Relationships
  employee     Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("leaves")
}

enum LeaveType {
  ANNUAL
  SICK
  MATERNITY
  PATERNITY
  UNPAID
  OTHER
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

// Payroll record
model Payslip {
  id           String   @id @default(uuid())
  employeeId   String
  payPeriodStart DateTime @db.Date
  payPeriodEnd   DateTime @db.Date
  baseSalary     Float
  bonus          Float   @default(0)
  deductions     Float   @default(0)
  tax            Float   @default(0)
  netSalary      Float
  status         PayslipStatus @default(DRAFT)
  documentUrl    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  tenantId       String

  // Relationships
  employee       Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  tenant         Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("payslips")
}

enum PayslipStatus {
  DRAFT
  PUBLISHED
  PAID
}

// Document storage
model Document {
  id           String   @id @default(uuid())
  employeeId   String
  name         String
  type         DocumentType
  fileUrl      String
  fileSize     Int
  mimeType     String
  uploadedAt   DateTime @default(now())
  updatedAt    DateTime @updatedAt
  tenantId     String

  // Relationships
  employee     Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("documents")
}

enum DocumentType {
  RESUME
  CONTRACT
  ID_PROOF
  ADDRESS_PROOF
  CERTIFICATE
  PAYSLIP
  OTHER
}

// Notifications
model Notification {
  id           String   @id @default(uuid())
  title        String
  message      String
  recipientId  String
  senderId     String
  isRead       Boolean  @default(false)
  type         NotificationType
  linkUrl      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  tenantId     String

  // Relationships
  recipient    User     @relation("ReceivedBy", fields: [recipientId], references: [id], onDelete: Cascade)
  sender       User     @relation("SentBy", fields: [senderId], references: [id], onDelete: Cascade)
  tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum NotificationType {
  INFO
  WARNING
  SUCCESS
  ERROR
  LEAVE_REQUEST
  LEAVE_APPROVAL
  DOCUMENT_UPLOAD
  PAYSLIP
}

// Performance Review
model PerformanceReview {
  id              String   @id @default(uuid())
  employeeId      String
  reviewerId      String
  reviewDate      DateTime
  performanceScore Float
  strengths       String?
  areasToImprove  String?
  comments        String?
  status          ReviewStatus @default(DRAFT)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  employee        Employee @relation("ReviewedEmployee", fields: [employeeId], references: [id], onDelete: Cascade)
  reviewer        Employee @relation("Reviewer", fields: [reviewerId], references: [id], onDelete: Cascade)

  @@map("performance_reviews")
}

enum ReviewStatus {
  DRAFT
  IN_REVIEW
  COMPLETED
  ACKNOWLEDGED
}

// Goals
model Goal {
  id              String   @id @default(uuid())
  employeeId      String
  title           String
  description     String
  targetDate      DateTime
  status          GoalStatus @default(IN_PROGRESS)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  employee        Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("goals")
}

enum GoalStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
